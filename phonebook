#include <iostream>
#include <vector>
#include <fstream>
#include <cstring>
using namespace std;
struct date
{
    int day;
    int month;
    int year;
};
struct contact
{
    string name;
    string lastname;
    string nickname;
    string email;
    date birthday;
    vector<long long> phonenumber;
    void getinfo()
    {
        phonenumber.resize(0);
        getname();
        char nic;
        cout << "contact has a nickname?(y/n) ";
        cin >> nic;
        cin.get();
        if (nic == 'y' || nic == 'Y')
        {
            getnickname();
        }
        else
        {
            nickname = "nothing@!#";
        }
        getbirthday();
        // cin.get();
        getemail();
    }
    void getname()
    {
        cout << "Fullname: ";
        cin >> name >> lastname;
        if (name.size() < 3 || lastname.size() < 3)
        {
            cout << "Invalid inputs!\nTRY AGAIN!\n";
            getname();
        }
        for (int i = 0; i < name.size(); i++)
        {
            if (name[i] >= 65 && name[i] <= 90)
            {
                name[i] = name[i] + 32;
            }
        }
        for (int i = 0; i < lastname.size(); i++)
        {
            if (lastname[i] >= 65 && lastname[i] <= 90)
            {
                lastname[i] = lastname[i] + 32;
            }
        }
    }
    void getnickname()
    {
        cout << "Nickname: ";
        getline(cin, nickname);
        for (int i = 0; i < nickname.size(); i++)
        {
            if (nickname[i] == ' ')
            {
                nickname[i] = '-';
            }
        }
        // cin >> nickname;
        if (nickname.size() < 3)
        {
            cout << "Invalid inputs!\nTRY AGAIN!\n";
            getnickname();
        }
        for (int i = 0; i < nickname.size(); i++)
        {
            if (nickname[i] >= 65 && nickname[i] <= 90)
            {
                nickname[i] = nickname[i] + 32;
            }
        }
    }
    void getbirthday()
    {
        bool condition;
        cout << "Birthday(YYYY MM DD): ";
        cin >> birthday.year >> birthday.month >> birthday.day;
        condition = validbirthday(birthday.year, birthday.month, birthday.day);
        if (!condition)
        {
            getbirthday();
        }
    }
    void getemail()
    {
        bool condition;
        cout << "E-mail: ";
        cin >> email;
        condition = checkemail(email);
        if (!condition)
        {
            cout << "Oops\nincorrect email!\n";
            getemail();
        }
        for (int i = 0; i < email.size(); i++)
        {
            if (email[i] >= 65 && email[i] <= 90)
            {
                email[i] = email[i] + 32;
            }
        }
    }
    bool checkemail(string enteredemail)
    {
        char symbols[9] = {'(', ')', '<', '>', ',', ':', ';', '\"', '\\'};
        int count = 0;
        bool condition = true;
        //if (enteredemail[0] == '@' || !(enteredemail[0] >= 48 && enteredemail[0] <= 57))
        if (!(enteredemail[0] >= 97 && enteredemail[0] <= 122))
        {
            condition = false;
        }
        if (condition)
        {
            for (int i = 0; i < enteredemail.size(); i++)
            {
                if (enteredemail[i] == '@')
                {
                    count++;
                }
            }
            if (count != 1)
            {
                condition = false;
            }
        }
        if (condition)
        {
            int j = 0;
            for (int i = 0; i < enteredemail.size() && enteredemail[i] != '@'; i++)
            {
                j++;
            }
            if (j > 64)
            {
                condition = false;
            }
        }
        if (condition)
        {
            for (int i = 0; i < 9 && condition; i++)
            {
                for (int j = 0; j < enteredemail.size(); j++)
                {
                    if (symbols[i] == enteredemail[j])
                    {
                        condition = false;
                    }
                }
            }
        }
        if (condition)
        {
            int count1 = 0;
            for (int i = 0; i < enteredemail.size(); i++)
            {
                if (enteredemail[i] == '@')
                {
                    for (int j = enteredemail.size(); j > i; j--)
                    {
                        if (enteredemail[j] == '.')
                        {
                            count1++;
                        }
                    }
                }
            }
            if (count1 != 1)
            {
                condition = false;
            }
        }
        return condition;
    }
    bool validbirthday(int y, int m, int d)
    {
        bool condition = true;
        if (y < 1290)
        {
            cerr << "Your contact is a fossil!\nTRY AGAIN!\n";
            condition = false;
        }
        else if (y > 1400)
        {
            cerr << "We can\'t save time travelers information!\nTRY AGAIN!\n";
            condition = false;
        }
        else if (m < 1 || m > 12)
        {
            cerr << "Invalid inputs!\nTRY AGAIN!\n";
            condition = false;
        }
        else if (m > 6 && m < 12 && d >= 31)
        {
            cerr << "Invalid inputs!\nTRY AGAIN!\n";
            condition = false;
        }
        else if (m == 12 && d >= 30)
        {
            cerr << "Invalid inputs!\nTRY AGAIN!\n";
            condition = false;
        }
        else if (m <= 6 && d > 31)
        {
            cerr << "Invalid inputs!\nTRY AGAIN!\n";
            condition = false;
        }
        return condition;
    }
    void showinfo()
    {
        cout << "Fullname: " << name << " " << lastname << '\n';
        if (nickname != "nothing@!#")
        {
            cout << "Nickname: ";
            for (int i = 0; i < nickname.size(); i++)
            {

                if (nickname[i] == '-')
                {
                    cout << ' ';
                }
                else
                {
                    cout << nickname[i];
                }
            }
            cout << '\n';
        }
        cout << "Birthday: " << birthday.year << "/" << birthday.month << "/" << birthday.day << '\n';
        cout << "Email: " << email << "\n";
        for (int i = 0; i < phonenumber.size(); i++)
        {
            cout << "Phonenumber " << i + 1 << " : " << phonenumber[i] << '\n';
        }
    }
};
void menu(vector<contact>);
vector<contact> addcontact(vector<contact>);
void searchandshow(vector<contact>);
void fullnamesearch(vector<contact>);
void firstnamesearch(vector<contact> contacts);
void lastnamesearch(vector<contact> contacts);
void numbersearch(vector<contact>);
void birthdaynicksearch(vector<contact>);
void emailsearch(vector<contact>);
void showallcontacts(vector<contact>);
vector<contact> deletecontact(vector<contact>);
vector<contact> deletecontacts(vector<contact>);
vector<contact> editcontact(vector<contact>);
vector<contact> changenickname(vector<contact>, int);
vector<contact> deletenickname(vector<contact>, int);
vector<contact> addnickname(vector<contact>, int);
vector<contact> removephonenumber(vector<contact> contacts, int i);
vector<contact> addphonenumber(vector<contact>, int);
vector<contact> changephonenumber(vector<contact>, int);
vector<contact> changeemail(vector<contact>, int);
vector<contact> sortcontact(vector<contact>);
vector<contact> lastnamesort(vector<contact>);
vector<contact> firstnamesort(vector<contact>);
vector<contact> birthdaysort(vector<contact>);
string lowercase(string);
void writefile(contact);
bool readfile(vector<contact> &);
void cleanwritefile(vector<contact>);
bool createfile();
int main()
{
    bool condition = true;
    vector<contact> contacts;
    condition = readfile(contacts);
    if (condition)
    {
        if (contacts.size() == 0)
        {
            char cnt;
            cout << "WELCOME!\nThis phonebook designed for you!\nYou can save your contacts here and whenever you want, you can check,change or remove it.\nNow press a key to start the programme.\n";
            cin >> cnt;
            system("cls");
            menu(contacts);
        }
        else
        {
            cout << "WELCOME BACK MY FRIEND!\n\n";
            menu(contacts);
        }
    }
    else
    {
        cerr << "There is an error in file!\n";
        system("pause");
    }
    return 0;
}
void menu(vector<contact> contacts)
{
    char exit;
    while (exit != 'Y' && exit != 'y')
    {
        char operation;
        cout << "\n1.add contact\n2.search and show contacts\n3.delete contact\n4.edit contact\n5.sort contacts\n0.exit\n";
        cout << "----------------------------------------------------------------\n";
        cin >> operation;
        system("cls");
        if (operation == '1')
        {
            contacts = addcontact(contacts);
        }
        else if (operation == '2')
        {
            searchandshow(contacts);
        }
        else if (operation == '3')
        {
            contacts = deletecontact(contacts);
        }
        else if (operation == '4')
        {
            contacts = editcontact(contacts);
        }
        else if (operation == '5')
        {
            contacts = sortcontact(contacts);
        }
        else if (operation == '0')
        {
            cout << "Are you sure?(y/n) ";
            cin >> exit;
        }
        else if (operation >= '6')
        {
            cerr << "Please enter only 0-5!\n";
        }
    }
}
vector<contact> addcontact(vector<contact> contacts)
{
    contact contact1;
    char addcon;

    do
    {
        int m;
        contact1.getinfo();
        while (m < contacts.size())
        {
            int h = 0;
            if (contacts[m].email == contact1.email)
            {
                cerr << "Duplicate email.\n";
                contact1.getemail();
                m = 0;
                h++;
            }
            if (h == 0)
            {
                m++;
            }
        }
        char addnum;
        do
        {
            long long number;
            bool condition = false;
            cout << "phonenumber: ";
            cin >> number;
            while (!condition)
            {
                string numberlen = to_string(number);
                if (numberlen.size() != 10)
                {
                    cout << "Invalid inputs\nTRY AGAIN!\nphonenumber: ";
                    cin >> number;
                }
                else
                {
                    condition = true;
                }
            }
            int i = 0, k;
            while (i < contacts.size())
            {
                k = 0;
                for (int j = 0; j < contacts[i].phonenumber.size(); j++)
                {
                    if (number == contacts[i].phonenumber.at(j))
                    {
                        cout << "This phonenumber already exist!\nTRY AGAIN\nPhonenumber: ";
                        cin >> number;
                        i = 0;
                        k++;
                    }
                }
                if (k == 0)
                {
                    i++;
                }
            }
            contact1.phonenumber.push_back(number);
            cout << "Do you want add another number to this contact?(y/n) ";
            cin >> addnum;
        } while (addnum == 'y' || addnum == 'Y');
        contacts.push_back(contact1);
        writefile(contact1);
        system("cls");
        cout << "contact added successfully!\n";
        cout << "\nDo you want add another contact?(y/n) ";
        cin >> addcon;
        system("cls");
    } while (addcon == 'y' || addcon == 'Y');
    return contacts;
}
void searchandshow(vector<contact> contacts)
{
    char searchmenu;
    while (searchmenu != '0')
    {
        cout << "\nsearch by:\n1. name\n2.phonenumber\n3.nickname and birthday\n4.email\n5.show all contacts\n0.return\n";
        cout << "----------------------------------------------------------------\n";
        cin >> searchmenu;
        system("cls");
        if (searchmenu == '1')
        {
            char namesearch;
            while (namesearch != '0')
            {
                cout << "\nsearch by:\n1.fullname\n2.firstname\n3.lastname\n0.return\n";
                cout << "----------------------------------------------------------------\n";
                cin >> namesearch;
                system("cls");
                if (namesearch == '1')
                {
                    fullnamesearch(contacts);
                }
                else if (namesearch == '2')
                {
                    firstnamesearch(contacts);
                }
                else if (namesearch == '3')
                {
                    lastnamesearch(contacts);
                }
            }
        }
        else if (searchmenu == '2')
        {
            numbersearch(contacts);
        }
        else if (searchmenu == '3')
        {
            birthdaynicksearch(contacts);
        }
        else if (searchmenu == '4')
        {
            emailsearch(contacts);
        }
        else if (searchmenu == '5')
        {
            showallcontacts(contacts);
        }
        else if (searchmenu != '0')
        {
            cerr << "Please enter only 0-5!\n";
        }
    }
}
void fullnamesearch(vector<contact> contacts)
{
    string fname, lname;
    bool condition = false;
    cout << "Fullname: ";
    cin >> fname >> lname;
    fname = lowercase(fname);
    lname = lowercase(lname);
    for (int i = 0; i < contacts.size(); i++)
    {
        if (contacts[i].name == fname && contacts[i].lastname == lname)
        {
            cout << '\n';
            contacts[i].showinfo();
            condition = true;
            cout << '\n';
        }
    }
    if (!condition)
    {
        cerr << "contact not found!\n";
        char cnt;
        cout << "Do you want enter another info to search?(y/n) ";
        cin >> cnt;
        if (cnt == 'y' || cnt == 'Y')
        {
            fullnamesearch(contacts);
        }
    }
}
void firstnamesearch(vector<contact> contacts)
{
    string fname;
    cout << "Firstname: ";
    cin >> fname;
    fname = lowercase(fname);
    bool condition = false;
    for (int i = 0; i < contacts.size(); i++)
    {
        if (contacts[i].name == fname)
        {
            cout << '\n';
            contacts[i].showinfo();
            condition = true;
            cout << '\n';
        }
    }
    if (!condition)
    {
        cerr << "contact not found!\n";
        char cnt;
        cout << "Do you want enter another info to search?(y/n) ";
        cin >> cnt;
        if (cnt == 'y' || cnt == 'Y')
        {
            firstnamesearch(contacts);
        }
    }
}
void lastnamesearch(vector<contact> contacts)
{
    string lname;
    cout << "Lastname: ";
    cin >> lname;
    lname = lowercase(lname);
    bool condition = false;
    for (int i = 0; i < contacts.size(); i++)
    {
        if (contacts[i].lastname == lname)
        {
            cout << '\n';
            contacts[i].showinfo();
            condition = true;
            cout << '\n';
        }
    }
    if (!condition)
    {
        cerr << "contact not found!\n";
        char cnt;
        cout << "Do you want enter another info to search?(y/n) ";
        cin >> cnt;
        if (cnt == 'y' || cnt == 'Y')
        {
            lastnamesearch(contacts);
        }
    }
}
void numbersearch(vector<contact> contacts)
{
    long long enterednum;
    cout << "Phonenumber: ";
    cin >> enterednum;
    bool condition = false;
    for (int i = 0; i < contacts.size(); i++)
    {
        for (int j = 0; j < contacts[i].phonenumber.size(); j++)
        {
            if (enterednum == contacts[i].phonenumber[j])
            {
                cout << '\n';
                contacts[i].showinfo();
                condition = true;
                cout << '\n';
            }
        }
    }
    if (!condition)
    {
        cerr << "contact not found!\n";
        char cnt;
        cout << "Do you want enter another info to search?(y/n) ";
        cin >> cnt;
        if (cnt == 'y' || cnt == 'Y')
        {
            numbersearch(contacts);
        }
    }
}
void birthdaynicksearch(vector<contact> contacts)
{
    int year, month, day;
    string nickname;
    char nic;
    bool condition = false;
    cout << "Birthday(YYYY MM DD): ";
    cin >> year >> month >> day;
    cout << "contact have a nickname?(y/n) ";
    cin >> nic;
    cin.get();
    if (nic == 'y' || nic == 'Y')
    {
        cout << "Nickname: ";
        cin >> nickname;
        nickname = lowercase(nickname);
    }
    if (nic == 'y' || nic == 'Y')
    {
        for (int i = 0; i < contacts.size(); i++)
        {
            if (nickname == contacts[i].nickname && year == contacts[i].birthday.year && month == contacts[i].birthday.month && day == contacts[i].birthday.day)
            {
                cout << '\n';
                contacts[i].showinfo();
                cout << '\n';
                condition = true;
            }
        }
    }
    else
    {
        for (int i = 0; i < contacts.size(); i++)
        {
            if (year == contacts[i].birthday.year && month == contacts[i].birthday.month && day == contacts[i].birthday.day)
            {
                cout << '\n';
                contacts[i].showinfo();
                cout << '\n';
                condition = true;
            }
        }
    }
    if (!condition)
    {
        cerr << "contact not found!\n";
        char cnt;
        cout << "Do you want enter another info to search?(y/n) ";
        cin >> cnt;
        if (cnt == 'y' || cnt == 'Y')
        {
            birthdaynicksearch(contacts);
        }
    }
}
void emailsearch(vector<contact> contacts)
{
    string address;
    cout << "Email: ";
    cin >> address;
    address = lowercase(address);
    bool condition = false;
    for (int i = 0; i < contacts.size(); i++)
    {
        if (contacts[i].email == address)
        {
            cout << '\n';
            contacts[i].showinfo();
            condition = true;
            cout << '\n';
        }
    }
    if (!condition)
    {
        cerr << "contact not found!\n";
        char cnt;
        cout << "Do you want enter another info to search?(y/n) ";
        cin >> cnt;
        if (cnt == 'y' || cnt == 'Y')
        {
            emailsearch(contacts);
        }
    }
}
void showallcontacts(vector<contact> contacts)
{
    if (contacts.size() == 0)
    {
        cerr << "There is no contact!\n";
    }
    else
    {
        for (int i = 0; i < contacts.size(); i++)
        {
            cout << "\n#" << i + 1 << "\n";
            contacts[i].showinfo();
        }
    }
}
vector<contact> deletecontact(vector<contact> contacts)
{
    char deletecon;
    char deletetype;
    do
    {
        // deletetype = '-1';
        bool condition = false;
        cout << "\nsearch by:\n1.fullname\n2.phonenumber\n3.email\n4.nickname\n5.birthday\n6.delete all contacts\n0.return\n";
        cout << "----------------------------------------------------------------\n";
        cin >> deletetype;
        system("cls");
        if (deletetype == '1')
        {
            string fname, lname;
            cout << "Fullname: ";
            cin >> fname >> lname;
            fname = lowercase(fname);
            lname = lowercase(lname);
            for (int i = 0; i < contacts.size(); i++)
            {
                if (contacts[i].name == fname && contacts[i].lastname == lname)
                {
                    cout << "\n#" << i + 1 << '\n';
                    contacts[i].showinfo();
                    condition = true;
                    cout << '\n';
                }
            }
            if (!condition)
            {
                cerr << "contact not found!\n";
            }
            else
            {
                int row = 0;
                cout << "Enter desired contact row: #";
                cin >> row;
                row = row - 1;
                while (contacts[row].name != fname && contacts[row].lastname != lname)
                {
                    cout << "Enter desired contact row: #";
                    cin >> row;
                    row = row - 1;
                }
                char del;
                cout << "Are you sure?(y/n) ";
                cin >> del;

                if (del == 'y' || del == 'Y')
                {
                    contacts.erase(contacts.begin() + row);
                    cout << "deleted successfully!\n";
                }
                else
                {
                    cout << "OK!\n";
                }
            }
        }
        if (deletetype == '2')
        {
            long long number;
            int pos;
            cout << "Phonenumber: ";
            cin >> number;
            for (int i = 0; i < contacts.size(); i++)
            {
                for (int j = 0; j < contacts[i].phonenumber.size(); j++)
                {
                    if (number == contacts[i].phonenumber[j])
                    {
                        condition = true;
                        pos = i;
                    }
                }
            }
            if (!condition)
            {
                cerr << "contact not found!\n";
            }
            else
            {
                char del;
                cout << "Are you sure?(y/n) ";
                cin >> del;
                if (del == 'y' || del == 'Y')
                {
                    contacts.erase(contacts.begin() + pos);
                    cout << "deleted successfully!\n";
                }
                else
                {
                    cout << "OK!\n";
                }
            }
        }
        else if (deletetype == '3')
        {
            string email;
            cout << "Email: ";
            cin >> email;
            email = lowercase(email);
            int pos = 0;
            for (int i = 0; i < contacts.size(); i++)
            {
                if (contacts[i].email == email)
                {
                    pos = i;
                    condition = true;
                }
            }
            if (!condition)
            {
                cerr << "contact not found!\n";
            }
            else
            {
                char del;
                cout << "Are you sure?(y/n) ";
                cin >> del;
                if (del == 'y' || del == 'Y')
                {
                    contacts.erase(contacts.begin() + pos);
                    cout << "deleted successfully!\n";
                }
                else
                {
                    cout << "OK!\n";
                }
            }
        }
        else if (deletetype == '4')
        {
            string nickname;
            cout << "Nickname: ";
            cin >> nickname;
            nickname = lowercase(nickname);
            for (int i = 0; i < contacts.size(); i++)
            {
                if (contacts[i].nickname == nickname)
                {
                    cout << "\n#" << i + 1 << '\n';
                    contacts[i].showinfo();
                    condition = true;
                    cout << '\n';
                }
            }
            if (!condition)
            {
                cerr << "contact not found!\n";
            }
            else
            {
                int row = 0;
                cout << "Enter desired contact row: #";
                cin >> row;
                row = row - 1;
                while (contacts[row].nickname != nickname)
                {
                    cout << "Enter desired contact row: #";
                    cin >> row;
                    row = row - 1;
                }
                char del;
                cout << "Are you sure?(y/n) ";
                cin >> del;

                if (del == 'y' || del == 'Y')
                {
                    contacts.erase(contacts.begin() + row);
                    cout << "deleted successfully!\n";
                }
                else
                {
                    cout << "OK!\n";
                }
            }
        }
        else if (deletetype == '5')
        {
            int year, month, day;
            cout << "Birthday(YYYY MM DD): ";
            cin >> year >> month >> day;
            for (int i = 0; i < contacts.size(); i++)
            {
                if (contacts[i].birthday.year == year && contacts[i].birthday.month == month && contacts[i].birthday.day == day)
                {
                    cout << "\n#" << i + 1 << '\n';
                    contacts[i].showinfo();
                    condition = true;
                    cout << '\n';
                }
            }
            if (!condition)
            {
                cerr << "contact not found!\n";
            }
            else
            {
                int row = 0;
                cout << "Enter desired contact row: #";
                cin >> row;
                row = row - 1;
                while (contacts[row].birthday.year != year && contacts[row].birthday.month != month && contacts[row].birthday.day != day)
                {
                    cout << "Enter desired contact row: #";
                    cin >> row;
                    row = row - 1;
                }
                char del;
                cout << "Are you sure?(y/n) ";
                cin >> del;

                if (del == 'y' || del == 'Y')
                {
                    contacts.erase(contacts.begin() + row);
                    cout << "deleted successfully!\n";
                }
                else
                {
                    cout << "OK!\n";
                }
            }
        }
        else if (deletetype == '6')
        {
            contacts = deletecontacts(contacts);
            condition = true;
        }
        else if (deletetype >= '7')
        {
            cerr << "Please enter only 0-6!\n";
            deletecontact(contacts);
        }
        if (!condition && deletetype != '0' && !(deletetype >= '7'))
        {
            char cnt;
            cout << "Do you want enter another info to search?(y/n) ";
            cin >> cnt;
            if (cnt == 'y' || cnt == 'Y')
            {
                deletecontact(contacts);
            }
        }
        /*if (condition && deletetype != '0' && deletetype!='6')
        {
            cout << "Do you want to delete another contact?(y/n) ";
            cin >> deletecon;
            (deletecon == 'y' || deletecon == 'Y') &&
        }*/
    } while (deletetype != '0' && !(deletetype >= '6'));
    cleanwritefile(contacts);
    return contacts;
}
vector<contact> deletecontacts(vector<contact> contacts)
{
    vector<contact> newcontacts;
    cerr << "\ncontacts deleted!\nphonebook is empty!\n";
    cleanwritefile(contacts);
    return newcontacts;
}
vector<contact> editcontact(vector<contact> contacts)
{
    char searchby;
    do
    {
        bool condition = false;
        int position = 0;
        cout << "\nsearch by:\n1.Fullname\n2.Phonenumber\n0.return\n";
        cout << "----------------------------------------------------------------\n";
        cin >> searchby;
        system("cls");
        if (searchby == '1')
        {
            string fname, lname;
            cout << "Fullname: ";
            cin >> fname >> lname;
            fname = lowercase(fname);
            lname = lowercase(lname);
            for (int i = 0; i < contacts.size(); i++)
            {
                if (contacts[i].name == fname && contacts[i].lastname == lname)
                {
                    cout << "\n#" << i + 1 << '\n';
                    contacts[i].showinfo();
                    condition = true;
                    cout << '\n';
                }
            }
            if (!condition)
            {
                cerr << "contact not found!\n";
            }
            else
            {
                int row = 0;
                cout << "Enter desired contact row: #";
                cin >> row;
                position = row - 1;
                while (contacts[position].name != fname && contacts[position].lastname != lname)
                {
                    cout << "Enter desired contact row: #";
                    cin >> row;
                    position = row - 1;
                }
            }
        }
        else if (searchby == '2')
        {
            long long phonenumber;
            cout << "Phonenumber: ";
            cin >> phonenumber;
            for (int i = 0; i < contacts.size(); i++)
            {
                for (int j = 0; j < contacts[i].phonenumber.size(); j++)
                {
                    if (phonenumber == contacts[i].phonenumber[j])
                    {
                        cout << '\n';
                        contacts[i].showinfo();
                        condition = true;
                        position = i;
                        cout << '\n';
                    }
                }
            }
            if (!condition)
            {
                cerr << "contact not found!\n";
            }
        }
        if (condition)
        {
            char editor;
            do
            {
                editor = -1;
                cout << "\n1.change nickname\n2.delete nickname\n3.add nickname\n4.remove phonenumber\n5.add phonenumber\n6.change phonenumber\n7.change email\n0.return\n";
                cout << "----------------------------------------------------------------\n";
                cin >> editor;
                system("cls");
                if (editor == '1')
                {
                    contacts = changenickname(contacts, position);
                }
                else if (editor == '2')
                {
                    contacts = deletenickname(contacts, position);
                }
                else if (editor == '3')
                {
                    contacts = addnickname(contacts, position);
                }
                else if (editor == '4')
                {
                    contacts = removephonenumber(contacts, position);
                }
                else if (editor == '5')
                {
                    contacts = addphonenumber(contacts, position);
                }
                else if (editor == '6')
                {
                    contacts = changephonenumber(contacts, position);
                }
                else if (editor == '7')
                {
                    contacts = changeemail(contacts, position);
                }
            } while (editor != '0');
        }

    } while (searchby != '0');
    cleanwritefile(contacts);
    return contacts;
}
vector<contact> changenickname(vector<contact> contacts, int i)
{
    if (contacts[i].nickname == "nothing@!#")
    {
        cerr << contacts[i].name << " " << contacts[i].lastname << " has no nickname!\n";
    }
    else
    {
        cin.get();
        contacts[i].nickname = "";
        cout << "new ";
        contacts[i].getnickname();
        cout << "nickname changed successfully!\n";
    }
    cleanwritefile(contacts);
    return contacts;
}
vector<contact> deletenickname(vector<contact> contacts, int i)
{
    if (contacts[i].nickname == "")
    {
        cerr << contacts[i].name << " " << contacts[i].lastname << " has no nickname!\n";
    }
    else
    {
        contacts[i].nickname = "nothing@!#";
        cout << "nickname deleted successfully!\n";
    }
    cleanwritefile(contacts);
    return contacts;
}
vector<contact> addnickname(vector<contact> contacts, int i)
{
    if (contacts[i].nickname != "nothing@!#")
    {
        cerr << contacts[i].name << " " << contacts[i].lastname << "already has a nickname!\n";
        char nicedit;
        cout << "Do you want to (change/delete) it?(y/n) ";
        cin >> nicedit;
        if (nicedit == 'y' || nicedit == 'Y')
        {
            char op;
            cout << "1.change\n2.delete\n";
            cout << "----------------------------------------------------------------\n";
            cin >> op;
            if (op == '1')
            {
                contacts = changenickname(contacts, i);
            }
            else if (op == '2')
            {
                contacts = deletenickname(contacts, i);
            }
        }
    }
    else
    {
        cin.get();
        contacts[i].getnickname();
        cout << "nickname added successfully!\n";
    }
    cleanwritefile(contacts);
    return contacts;
}
vector<contact> removephonenumber(vector<contact> contacts, int i)
{
    if (contacts[i].phonenumber.size() == 1)
    {
        cerr << "Contact only has a phonenumber.\nYou can\'t delete it!\n";
    }
    else
    {
        long long num;
        cout << '\n';
        contacts[i].showinfo();
        cout << "\nEnter the row or whole number: ";
        cin >> num;
        for (int j = 0; j < contacts[i].phonenumber.size(); j++)
        {
            if ((num - 1) == j)
            {
                contacts[i].phonenumber.erase(contacts[i].phonenumber.begin() + j);
                cout << "number deleted successfully!\n";
            }
            else if (num == contacts[i].phonenumber[j])
            {
                contacts[i].phonenumber.erase(contacts[i].phonenumber.begin() + j);
                cout << "number deleted successfully!\n";
            }
        }
    }
    cleanwritefile(contacts);
    return contacts;
}
vector<contact> addphonenumber(vector<contact> contacts, int i)
{
    char addnum;
    do
    {
        long long number;
        bool condition = false;
        cout << "phonenumber: ";
        cin >> number;
        while (!condition)
        {
            string numberlen = to_string(number);
            if (numberlen.size() != 10)
            {
                cout << "Invalid inputs\nTRY AGAIN!\nphonenumber: ";
                cin >> number;
            }
            else
            {
                condition = true;
            }
        }
        int h = 0, k;
        while (h < contacts.size())
        {
            k = 0;
            for (int j = 0; j < contacts[h].phonenumber.size(); j++)
            {
                if (number == contacts[h].phonenumber.at(j))
                {
                    cout << "This phonenumber already exist!\nTRY AGAIN\nPhonenumber: ";
                    cin >> number;
                    h = 0;
                    k++;
                }
            }
            if (k == 0)
            {
                h++;
            }
        }
        contacts[i].phonenumber.push_back(number);
        cout << "Phonenumber successfully added.\n";
        cout << "Do you want add another number to this contact?(y/n) ";
        cin >> addnum;
    } while (addnum == 'y' || addnum == 'Y');
    cleanwritefile(contacts);
    return contacts;
}
vector<contact> changephonenumber(vector<contact> contacts, int i)
{
    long long num;
    cout << '\n';
    contacts[i].showinfo();
    cout << "\nEnter the row or whole number: ";
    cin >> num;

    long long number;
    bool condition = false;
    cout << "Alternative phonenumber: ";
    cin >> number;
    while (!condition)
    {
        string numberlen = to_string(number);
        if (numberlen.size() != 10)
        {
            cout << "Invalid inputs\nTRY AGAIN!\nphonenumber: ";
            cin >> number;
        }
        else
        {
            condition = true;
        }
    }
    int h = 0, k;
    while (h < contacts.size())
    {
        k = 0;
        for (int j = 0; j < contacts[h].phonenumber.size(); j++)
        {
            if (number == contacts[h].phonenumber.at(j))
            {
                cout << "This phonenumber already exist!\nTRY AGAIN\nPhonenumber: ";
                cin >> number;
                i = 0;
                k++;
            }
        }
        if (k == 0)
        {
            h++;
        }
    }

    for (int j = 0; j < contacts[i].phonenumber.size(); j++)
    {
        if ((num - 1) == j)
        {
            contacts[i].phonenumber[j] = number;
            cout << "number changed successfully!\n";
        }
        else if (num == contacts[i].phonenumber[j])
        {
            contacts[i].phonenumber[j] = number;
            cout << "number changed successfully!\n";
        }
    }

    cleanwritefile(contacts);
    return contacts;
}
vector<contact> changeemail(vector<contact> contacts, int i)
{
    string email;
    // cin.get();
    cout << "alternative ";
    contacts[i].getemail();
    email = contacts[i].email;
    int m = 0;
    while (m < contacts.size())
    {
        int h = 0;
        if ((contacts[m].email == contacts[i].email) && (i != m))
        {
            cerr << "Duplicate email.\n";
            contacts[i].getemail();
            m = 0;
            h++;
        }
        if (h == 0)
        {
            m++;
        }
    }
    cout << "email changed successfully!\n";
    cleanwritefile(contacts);
    return contacts;
}
vector<contact> sortcontact(vector<contact> contacts)
{
    char sorttype;
    cout << "\nsort by:\n1.lastname\n2.firstname\n3.birthday\n0.return\n";
    cout << "----------------------------------------------------------------\n";
    cin >> sorttype;
    system("cls");
    if (sorttype == '1')
    {
        contacts = lastnamesort(contacts);
    }
    else if (sorttype == '2')
    {
        contacts = firstnamesort(contacts);
    }
    else if (sorttype == '3')
    {
        contacts = birthdaysort(contacts);
    }
    else if (sorttype != '0')
    {
        cout << "1, 2, 3!\n";
        sortcontact(contacts);
    }
    cleanwritefile(contacts);
    return contacts;
}
vector<contact> lastnamesort(vector<contact> contacts)
{
    for (int i = (contacts.size() - 2); i >= 0; i--)
    {
        for (int k = 0; k < contacts.size() - 1; k++)
        {
            if (contacts[k].lastname > contacts[k + 1].lastname)
            {
                swap(contacts[k], contacts[k + 1]);
            }
            else if (contacts[k].lastname == contacts[k + 1].lastname)
            {
                if (contacts[k].name > contacts[k + 1].name)
                {
                    swap(contacts[k], contacts[k + 1]);
                }
            }
        }
    }
    cout << "\nsorted successfully!\n";
    cleanwritefile(contacts);
    return contacts;
}
vector<contact> firstnamesort(vector<contact> contacts)
{
    for (int i = (contacts.size() - 2); i >= 0; i--)
    {
        for (int k = 0; k < contacts.size() - 1; k++)
        {
            if (contacts[k].name > contacts[k + 1].name)
            {
                swap(contacts[k], contacts[k + 1]);
            }
            else if (contacts[k].name == contacts[k + 1].name)
            {
                if (contacts[k].lastname > contacts[k + 1].lastname)
                {
                    swap(contacts[k], contacts[k + 1]);
                }
            }
        }
    }
    cout << "\nsorted successfully!\n";
    cleanwritefile(contacts);
    return contacts;
}
vector<contact> birthdaysort(vector<contact> contacts)
{
    for (int i = (contacts.size() - 2); i >= 0; i--)
    {
        for (int k = 0; k < contacts.size() - 1; k++)
        {
            if (contacts[k].birthday.year > contacts[k + 1].birthday.year)
            {
                swap(contacts[k], contacts[k + 1]);
            }
            else if (contacts[k].birthday.year == contacts[k + 1].birthday.year)
            {
                if (contacts[k].birthday.month > contacts[k + 1].birthday.month)
                {
                    swap(contacts[k], contacts[k + 1]);
                }
                else if (contacts[k].birthday.month == contacts[k + 1].birthday.month)
                {
                    if (contacts[k].birthday.day > contacts[k + 1].birthday.day)
                    {
                        swap(contacts[k], contacts[k + 1]);
                    }
                }
            }
        }
    }
    cout << "\nsorted successfully!\n";
    cleanwritefile(contacts);
    return contacts;
}
string lowercase(string word)
{
    for (int i = 0; i < word.size(); i++)
    {
        if (word[i] >= 65 && word[i] <= 90)
        {
            word[i] = word[i] + 32;
        }
    }
    return word;
}
void writefile(contact contact1)
{
    ofstream myfile("phonebook.txt", ios::app);
    if (myfile)
    {

        myfile << contact1.name << '\t';
        myfile << contact1.lastname << '\t';
        myfile << contact1.nickname << '\t';
        myfile << contact1.birthday.year << '\t';
        myfile << contact1.birthday.month << '\t';
        myfile << contact1.birthday.day << '\t';
        myfile << contact1.email << '\t';
        for (int j = 0; j < contact1.phonenumber.size(); j++)
        {
            myfile << contact1.phonenumber[j] << '\t';
        }
        myfile << 11111111111 << '\n';
        myfile.close();
    }
    else
    {
        cerr << "There is an error in the file!\n";
    }
}
bool readfile(vector<contact> &contacts)
{
    bool condition = true;
    ifstream myfile("phonebook.txt", ios::in);
    contact mycontact;
    long long number;
    /*if (myfile.peek() == ifstream::eof()){
        cerr << "error";
    }*/

    if (myfile)
    {
        while (myfile)
        {
            mycontact.phonenumber.resize(0);
            myfile >> mycontact.name;
            myfile >> mycontact.lastname;
            myfile >> mycontact.nickname;
            myfile >> mycontact.birthday.year;
            myfile >> mycontact.birthday.month;
            myfile >> mycontact.birthday.day;
            myfile >> mycontact.email;
            if (mycontact.name != "")
            {
                do
                {
                    myfile >> number;
                    mycontact.phonenumber.push_back(number);
                } while (number != 11111111111);
                mycontact.phonenumber.pop_back();
            }
            contacts.push_back(mycontact);
        }

        myfile.close();
        contacts.pop_back();
    }
    else
    {
        condition = createfile();
        // if (!myfile)
        //{
        // cerr << "There is an error in file!\n";
        // condition = false;
        //}
    }
    return condition;
}
void cleanwritefile(vector<contact> contacts)
{
    ofstream myfile("phonebook.txt", ios::trunc);
    if (myfile)
    {
        for (int i = 0; i < contacts.size(); i++)
        {
            myfile << contacts[i].name << '\t';
            myfile << contacts[i].lastname << '\t';
            myfile << contacts[i].nickname << '\t';
            myfile << contacts[i].birthday.year << '\t';
            myfile << contacts[i].birthday.month << '\t';
            myfile << contacts[i].birthday.day << '\t';
            myfile << contacts[i].email << '\t';
            for (int j = 0; j < contacts[i].phonenumber.size(); j++)
            {
                myfile << contacts[i].phonenumber[j] << '\t';
            }
            myfile << 11111111111 << '\n';
        }
        myfile.close();
    }
    else
    {
        cerr << "There is an error in the file\n";
    }
}
bool createfile()
{
    bool condition;
    ofstream myfile("phonebook.txt", ios::out);
    if (!myfile)
    {
        cerr << "There is an error in file!\n";
        condition = false;
    }
    else
    {
        condition = true;
        myfile.close();
    }
    return condition;
}
